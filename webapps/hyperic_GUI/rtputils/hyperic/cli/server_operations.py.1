import sys
import subprocess
import shlex
import os

class ServerOperations(object):
	"""docstring for ServerOperations"""
	def __init__(self, global_config):
		super(ServerOperations, self).__init__()
		self.global_config = global_config

	def start_server(self, ):
		"""docstring for start_server"""
		return self.run("sudo su - hyperic -c 'sh %s/bin/hq-server.sh start'" %(self.global_config["hypericsearch.server_base_path"],))

	def stop_server(self, ):
		"""docstring for stop_server"""
		return self.run("sudo su - hyperic -c 'sh %s/bin/hq-server.sh stop'" %(self.global_config["hypericsearch.server_base_path"],))

	def status_server(self, ):
		"""docstring for status_server"""
		return self.run("sudo su - hyperic -c 'sh %s/bin/hq-server.sh status'" %(self.global_config["hypericsearch.server_base_path"],))

	def restart_server(self, ):
		"""docstring for restart_server"""
		return self.run("sudo su - hyperic -c 'sh %s/bin/hq-server.sh restart'" %(self.global_config["hypericsearch.server_base_path"],))

	def dump_server(self, ):
		"""docstring for dump_server"""
		return self.run("sudo su - hyperic -c 'sh %s/bin/hq-server.sh dump'" %(self.global_config["hypericsearch.server_base_path"],))

	def get_server_config_file(self, ):
		"""docstring for print_server_config_file"""
		return self.run("sudo su - hyperic -c 'cat %s/conf/hq-server.conf'" %(self.global_config["hypericsearch.server_base_path"],))


	def run(self, command):
		"""docstring for run"""
		print "RUNNING COMMAND .. " 
		print command
		p = subprocess.Popen(shlex.split(command), 
					stdin=subprocess.PIPE, stdout=subprocess.PIPE, 
					stderr=subprocess.STDOUT, close_fds=True, 
					env=os.environ)
		(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)
		return child_stdout_and_stderr

	def read_config_file(self, global_config, configfilepath):
		"""docstring for read_config_file"""
		with open(configfilepath) as config:
			for line in  config.readlines():
				if "=" in line and not line.startswith("#"):
					key, value = line.strip().split("=", 1)
					self.global_config[key] = value
		return self.global_config
'''
if __name__ == '__main__':
	global_config = {}
	configfilepath = sys.argv[1]
	so = ServerOperations(global_config)
	so.read_config_file(global_config, configfilepath)
	print so.get_server_config_file().read()
'''
